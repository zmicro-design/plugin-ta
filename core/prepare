#!/bin/bash

ta::helloworld() {
  echo "helloworld"
}

ta::prepare() {
  # if in ci development mode, ignore check
  if [ "$CI" = "true" ]; then
    return
  fi

  # ta::auto_update >/dev/null 2>&1 &

  # zmicro check version
  log::debug "[$(timestamp)] check zmicro version ..."
  local zmicro_version="$(version::zmicro)"
  if [ "$(semver::compare_gte ${zmicro_version} $PLUGIN_TA_ZMICRO_VERSION)" != "true" ]; then
    log::info "[$(timestamp)] zmicro version found update, try to update it ..."
    zmicro update
  fi

  # ta check update
  log::debug "[$(timestamp)] check ta update ..."
  if [ "$(plugin::has_update_speed ${PLUGIN_NAME})" = "true" ]; then
    local NEW_VERSION=$(plugin::get_remote_version ${PLUGIN_NAME})
    # @TODO
    echo $NEW_VERSION | grep "✖" >>/dev/null 2>&1
    if [ "$?" = "0" ]; then
      log::error "[$(timestamp)] get new version error(detail: $NEW_VERSION)"
      exit 1
    fi

    log::info "[$(timestamp)] ta version found update(${PLUGIN_VERSION} => $(color::green $NEW_VERSION)), try to update it ..."
    ta update
  fi

  export PATH=$ZMICRO_HOME/bin:$PATH
  log::debug "[$(timestamp)] check nvm ..."
  which nvm >>/dev/null 2>&1
  if [ "$?" != "0" ]; then
    log::info "[$(timestamp)] prepare nvm (1) ..."
    zmicro plugin install nvm
  else
    local nvm_bin=$(which nvm)
    local standard_nvm_bin=$ZMICRO_HOME/bin/nvm
    if [ "$nvm_bin" != "$standard_nvm_bin" ]; then
      log::info "[$(timestamp)] prepare nvm (2) ..."
      zmicro plugin install nvm
    fi
  fi

  # @FIX npm global bin
  export NODE_HOME=/usr/local/node
  export NODE_USER_HOME=$HOME/.node
  export PATH=$NODE_USER_HOME/bin:$NODE_HOME/bin:$PATH

  log::debug "[$(timestamp)] check node exist ..."
  which node >>/dev/null
  if [ $? -ne 0 ]; then
    log::info "[$(timestamp)] node.js is not installed, try to install it ..."

    nvm use $PLUGIN_TA_NODE_VERSION
  fi

  log::debug "[$(timestamp)] check node version ..."
  local current_node_version=$(node -v)
  if [ "$current_node_version" != "$PLUGIN_TA_NODE_VERSION" ]; then
    log::info "当前 Node.js 版本是 $(color::red ${current_node_version}), 但是 Ta 系统要求 $(color::green ${PLUGIN_TA_NODE_VERSION})"

    if [ "$CI" != "true" ]; then
      os::inquirer value "yesno" "是否确认升级 Node.js 版本 ($(color::green ${PLUGIN_TA_NODE_VERSION}))？" true false
      if [ "$value" != "true" ]; then
        exit 0
      fi
    else
      log::info "CI 环境默认安装 $(color::green ${PLUGIN_TA_NODE_VERSION})"
    fi

    nvm use $PLUGIN_TA_NODE_VERSION
  fi

  log::debug "[$(timestamp)] check npm version ..."
  local current_npm_version=$(npm -v)
  if [ "$current_npm_version" != "$PLUGIN_TA_NPM_VERSION" ] && [ "$(version::compare_gt ${current_npm_version} $PLUGIN_TA_NPM_VERSION)" = "false" ]; then
    log::info "当前 npm 版本是 $(color::red ${current_npm_version}), 但是 Ta 系统要求至少 $(color::green ${PLUGIN_TA_NPM_VERSION})"

    if [ "$CI" != "true" ]; then
      os::inquirer value "yesno" "是否确认升级 npm 版本 ($(color::green ${PLUGIN_TA_NPM_VERSION}))？" true false
      if [ "$value" != "true" ]; then
        exit 0
      fi
    else
      log::info "CI 环境默认安装 $(color::green ${PLUGIN_TA_NPM_VERSION})"
    fi

    npm i -g npm@$PLUGIN_TA_NPM_VERSION
  elif [ "$(which npm)" != "$NODE_USER_HOME/bin/npm" ]; then
    log::info "修复 Mac M1 部分系统 NPM CLI Bug（EPERM: operation not permitted, uv_cwd）..."
    npm i -g npm@$PLUGIN_TA_NPM_VERSION
  fi

  log::debug "[$(timestamp)] check rimraf ..."
  which rimraf >>/dev/null
  if [ "$?" != "0" ]; then
    log::info "[$(timestamp)] rimraf is not installed, try to install it ..."
    npm i -g rimraf # --force
  fi

  log::debug "[$(timestamp)] check gpm ..."
  which gpm >>/dev/null
  if [ "$?" != "0" ]; then
    log::info "[$(timestamp)] gpm is not installed, try to install it ..."
    npm i -g @cliz/gpm # --force
  else
    # check version
    local gpm_version="v$(gpm --version)"
    if [ "$(semver::compare_gte ${gpm_version} $PLUGIN_TA_GPM_VERSION)" != "true" ]; then
      log::info "[$(timestamp)] gpm version found update, try to update it ..."
      npm i -g @cliz/gpm # @$PLUGIN_TA_GPM_VERSION --force
    fi
  fi

  log::debug "[$(timestamp)] check nrm ..."
  which nrm >>/dev/null
  if [ "$?" != "0" ]; then
    log::info "[$(timestamp)] nrm is not installed, try to install it ..."
    npm i -g @cliz/nrm # --force
  fi

  log::debug "[$(timestamp)] check nrm version ..."
  local current_nrm_version=$(nrm -V)
  if [ "$current_nrm_version" != "$PLUGIN_TA_NRM_VERSION" ] && [ "$(version::compare_gt ${current_nrm_version} $PLUGIN_TA_NRM_VERSION)" = "false" ]; then
    log::info "当前 nrm 版本是 $(color::red ${current_nrm_version}), 但是 Ta 系统要求至少 $(color::green ${PLUGIN_TA_NRM_VERSION})"
    npm i -g @cliz/nrm@$PLUGIN_TA_NRM_VERSION
  fi

  log::debug "[$(timestamp)] check npm registry version ..."
  # @TODO should compare with $PLUGIN_TA_NPM_REGISTRY
  if [ "$(npm config get registry)" != "$PLUGIN_TA_NPM_REGISTRY" ]; then
    nrm use $PLUGIN_TA_NPM_REGISTRY_ALIAS >>/dev/null
  fi

  if [ "$(npm config get registry)" != "$PLUGIN_TA_NPM_REGISTRY" ]; then
    npm set registry $PLUGIN_TA_NPM_REGISTRY >>/dev/null
  fi
}

export -f ta::helloworld
export -f ta::prepare
