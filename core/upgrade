#!/bin/bash

ta::upgrade() {
  local package=$1
  if [ -z "$package" ]; then
    log::error "[$(timestamp)][ta::upgrade] package is required"
    return 1
  fi

  log::success "[$(timestamp)] upgrading $package ..."
  case $package in
  zmicro)
    ta::upgrade_zmicro
    ;;
  nvm)
    ta::upgrade_nvm
    ;;
  gpm)
    ta::upgrade_gpm
    ;;
  nrm)
    ta::upgrade_nrm
    ;;
  npm)
    ta::upgrade_npm
    ;;
  nodejs)
    ta::upgrade_nodejs
    ;;
  *)
    log::error "[$(timestamp)][ta::upgrade] package($package) is not valid"
    return 1
    ;;
  esac

  log::success "[$(timestamp)] succeed to upgrade $package."
}

ta::upgrade_prepare() {
  if [ "$(npm config get prefix)" != "$HOME/.node" ]; then
    npm config set prefix $HOME/.node
  fi
}

ta::upgrade_zmicro() {
  zmicro update

  log::info "[$(timestamp)] current zmicro version: $(color::green $(zmicro version))"
}

ta::upgrade_nvm() {
  nvm update

  log::info "[$(timestamp)] current nvm version: $(color::green $(nvm version))"
}

ta::upgrade_gpm() {
  ta::upgrade_prepare

  npm i -g @cliz/gpm

  log::info "[$(timestamp)] current gpm version: $(color::green $(gpm --version))"
}

ta::upgrade_nrm() {
  ta::upgrade_prepare

  npm i -g @cliz/nrm

  log::info "[$(timestamp)] current nrm version: $(color::green $(nrm --version))"
}

ta::upgrade_npm() {
  ta::upgrade_prepare

  npm i -g npm@$PLUGIN_TA_NPM_VERSION

  log::info "[$(timestamp)] current npm version: $(color::green $(npm --version))"
}

ta::upgrade_nodejs() {
  export PATH=$ZMICRO_HOME/bin:$PATH
  which nvm >>/dev/null 2>&1
  if [ "$?" != "0" ]; then
    log::info "[$(timestamp)] prepare nvm (1) ..."
    zmicro plugin install nvm
  else
    local nvm_bin=$(which nvm)
    local standard_nvm_bin=$ZMICRO_HOME/bin/nvm
    if [ "$nvm_bin" != "$standard_nvm_bin" ]; then
      log::info "[$(timestamp)] prepare nvm (2) ..."
      zmicro plugin install nvm
    fi
  fi

  # @FIX npm global bin
  export NODE_HOME=/usr/local/node
  export NODE_USER_HOME=$HOME/.node
  export PATH=$NODE_USER_HOME/bin:$NODE_HOME/bin:$PATH

  which node >>/dev/null
  if [ $? -ne 0 ]; then
    log::info "[$(timestamp)] node.js is not installed, try to install it ..."

    nvm use $PLUGIN_TA_NODE_VERSION
  fi

  local current_node_version=$(node -v)
  if [ "$current_node_version" != "$PLUGIN_TA_NODE_VERSION" ]; then
    log::info "当前 Node.js 版本是 $(color::red ${current_node_version}), 但是 Ta 系统要求 $(color::green ${PLUGIN_TA_NODE_VERSION})"

    if [ "$CI" != "true" ]; then
      os::inquirer value "yesno" "是否确认升级 Node.js 版本 ($(color::green ${PLUGIN_TA_NODE_VERSION}))？" true false
      if [ "$value" != "true" ]; then
        exit 0
      fi
    else
      log::info "CI 环境默认安装 $(color::green ${PLUGIN_TA_NODE_VERSION})"
    fi

    nvm use $PLUGIN_TA_NODE_VERSION
  fi

  local current_npm_version=$(npm -v)
  if [ "$current_npm_version" != "$PLUGIN_TA_NPM_VERSION" ] && [ "$(version::compare_gt ${current_npm_version} $PLUGIN_TA_NPM_VERSION)" = "false" ]; then
    log::info "当前 npm 版本是 $(color::red ${current_npm_version}), 但是 Ta 系统要求至少 $(color::green ${PLUGIN_TA_NPM_VERSION})"

    if [ "$CI" != "true" ]; then
      os::inquirer value "yesno" "是否确认升级 npm 版本 ($(color::green ${PLUGIN_TA_NPM_VERSION}))？" true false
      if [ "$value" != "true" ]; then
        exit 0
      fi
    else
      log::info "CI 环境默认安装 $(color::green ${PLUGIN_TA_NPM_VERSION})"
    fi

    npm i -g npm@$PLUGIN_TA_NPM_VERSION
  elif [ "$(which npm)" != "$NODE_USER_HOME/bin/npm" ]; then
    log::info "修复 Mac M1 部分系统 NPM CLI Bug（EPERM: operation not permitted, uv_cwd）..."
    npm i -g npm@$PLUGIN_TA_NPM_VERSION
  fi

  log::info "[$(timestamp)] current nodejs version: $(color::green $(node --version))"
}

export -f ta::upgrade

export -f ta::upgrade_prepare

export -f ta::upgrade_zmicro

export -f ta::upgrade_nvm
export -f ta::upgrade_gpm
export -f ta::upgrade_nrm
export -f ta::upgrade_npm
export -f ta::upgrade_nodejs
